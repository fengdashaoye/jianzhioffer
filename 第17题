题目:输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
思路:首先我想的是不能建第3条链表存储，那样太low，最好在原先两条链表上修改。
首先判断两条链表是否存在空，如果存在则返回另一条链表。
然后找出开头最小的那条链表，设为first，另一条为second
然后就while(first!=null)
判断first.next是否为空，是否到end，如果为空，在second不为空的情况下将second接入first.next，second也往后跑
如果first.next不为空，在second不为空的情况下，比较second和first.next的值的大小。
如果second.val <= first.next.val，则插入，然后second也向后跑。
代码:
/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        if(list1 == null)
            return list2;
        if(list2 == null)
            return list1;
        //ListNode first = list1.val <= list2.val ?　list1 : list2;
        ListNode first = list1.val <= list2.val ? list1 : list2;
        ListNode second = list1.val > list2.val ? list1 : list2;
        ListNode head = first;
        ListNode second_suf = null;
        ListNode first_suf = null;
        while(first != null){
            if(first.next == null){
                if(second != null){
                    second_suf = second.next;
                    first.next = second;
                    first = first.next;
                    first.next = null;
                    second = second_suf;
                }
            }else{
                if(second != null){//之前没有这一句导致丢指针，没有这一句则可能first还没跑到底，second已经跑到底，再找second.val就会丢指针
                    if(second.val <= first.next.val){
                    	second_suf = second.next;
                    	first_suf = first.next;
                    	first.next = second;
                    	second.next = first_suf;
                    	second = second_suf;
                	}
                }
                
            }
            first = first.next;
            
        }
        return head;
    }
}

