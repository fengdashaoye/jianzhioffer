题目描述
请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流
中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。 
输出描述:
如果当前字符流没有存在出现一次的字符，返回#字符。

思路：这种情况肯定要想到用LinkedHashMap
代码:
import java.util.LinkedHashMap;
import java.util.Map.Entry;
import java.util.*;
public class Solution {
    //Insert one char from stringstream
    LinkedHashMap<Character, Integer> hash = new LinkedHashMap<Character, Integer>();
    public void Insert(char ch)
    {
        if(hash.containsKey(ch)){
            int number = hash.get(ch);
            number++;
            hash.put(ch, number);
        }else{
            hash.put(ch, 1);
        }
        
    }
  //return the first appearence once char in current stringstream
    public char FirstAppearingOnce()
    {
        int panduan = 0;
        char result = '#';
        for(Entry<Character, Integer> entry : hash.entrySet()){
            if(entry.getValue() == 1){
                result = entry.getKey();
                break;
            }
        }
        return result;
    
    }
}


