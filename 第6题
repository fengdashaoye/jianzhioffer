题目:
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。
输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。
NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
思路:一开始想的太简单了，从开始向后面遍历，只要遇到一个数字是比前面那个数字小的话就return。但是这个方法所花时间非常之多。
第一种思路的代码:
import java.util.ArrayList;
public class Solution {
    public int minNumberInRotateArray(int [] array) {
    	if(array.length == 0){
            return 0;
        }
        int number = array[0];
        for(int i = 0; i < array.length-1; i++){
            if(array[i+1] < array[i]){
                number = array[i+1];
                break;
            }
        }
        return number;
    }
}
第2中思路:二分法，旋转后分为两个部分，前面那个部分的值都大于后面那个部分的值.老实说时间差不多。
如果array[medium]>array[low] 则low = medium，不要low=medium+1，之前就是错在这里
如果array[medium]<array[low]则high = medium
我写的代码:
import java.util.ArrayList;
public class Solution {
    public int minNumberInRotateArray(int [] array) {
    	if(array.length == 0){
            return 0;
        }
        int number = array[0];
        int low = 0;
        int high = array.length-1;
        int medium = 0;
        while(low <= high){
        	medium = (low + high)/2;
            if(array[medium]>array[low]){
                low = medium;
            }else if(array[medium] < array[low]){
                high = medium;
            }else{
                number = array[medium];
                   if(array[medium+1]<array[medium])
                       number = array[medium+1];
                break;
            }
        }
        
        return number;
    }
}

书上的代码:二分法，找到最后肯定找到最大值(low)和最小值(high)
import java.util.ArrayList;
public class Solution {
    public int minNumberInRotateArray(int [] array) {
    	if(array.length == 0){
            return 0;
        }
        int number = array[0];
        int low = 0;
        int high = array.length-1;
        int medium = 0;
        while(array[low] >= array[high]){
            if(high - low == 1){
                medium = high;
                break;
            }
            medium = (low + high) / 2;
            if(array[medium] >= array[low]){
                low = medium;
            }else if (array[medium] <= array[low]){
                high = medium;
            }
        }
        
        return array[medium];
    }
}
