题目描述
一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
思路: 嗯，一开始比较笨的想法，用hashmap,主要是现在有点累，注意它特别声明了其他数字都出现了2次，仅有2个数字出现1次
代码:
//num1,num2分别为长度为1的数组。传出参数
//将num1[0],num2[0]设置为返回结果
import java.util.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Map;
public class Solution {
    public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) {
        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();
        for(int i = 0; i < array.length; i++){
            if(!hash.containsKey(array[i])){
                hash.put(array[i], 1);
            }else{
                hash.put(array[i], 2);
            }
        }
        int[] content = new int[2];
        int i = 0;
        for(Entry<Integer, Integer> entry : hash.entrySet()){
            if(entry.getValue() == 1){
                content[i] = entry.getKey();
                i++;
            }
        }
        num1[0] = content[0];
        num2[0] = content[1];
        
        
    }
}

嗯，大神的代码:
//num1,num2分别为长度为1的数组。传出参数
//将num1[0],num2[0]设置为返回结果
public class Solution {
    public void FindNumsAppearOnce(int [] array,int num1[], int num2[]) {
        if(array==null ||array.length<2)
            return ;
        int temp = 0;
        for(int i=0;i<array.length;i++) 
            temp ^= array[i];
        int indexOf1 = findFirstBitIs(temp);
        for(int i=0;i<array.length;i++){
            if(isBit(array[i], indexOf1))
                num1[0]^=array[i];
            else
                num2[0]^=array[i];
        }
    }
    public int findFirstBitIs(int num){
        int indexBit = 0; 
        while(((num & 1)==0) && (indexBit)<8*4){
            num = num >> 1;
            ++indexBit;
        }
        return indexBit;
    }
    public boolean isBit(int num,int indexBit){
        num = num >> indexBit;
        return (num & 1) == 1;
    }
}
