题目:输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
思路:老实说，此题在大一时出过，嗯，现在还是没做出来
本题的重点，想到思路，然后边界处理
具体的思路是，将这个矩阵看成一圈、一圈的嵌套，从外不断把圈add，add完一圈，再add里面一圈，直至重点。
此时就需要边界了，
注意每一个圈的起点都是[start][start]，如[0][0]和[1][1]
注意当matrix.length>start*2 && matrix[0].length>start*2时还有内圈，否则已经全部遍历完了。
add入list的时候也需要注意边界
//while((row >= start*2) && (column >= start*2))
上面这行是没有注意到边界，所以会多输出
if(start < end_row){//注意边界，没有注意到边界经常会多输出
if(end_colum > start && end_row > start){//注意边界，没有注意到边界经常会多输出
if(end_row-1 > start && end_colum > start){//注意边界，没有注意到边界经常会多输出
注意边界，没有注意到边界经常会多输出
代码:
import java.util.ArrayList;
public class Solution {
    
    public ArrayList<Integer> printMatrix(int [][] matrix) {
       if(matrix == null)
           return null;
       int row = matrix.length;
       int column = matrix[0].length;
       int start = 0; 
       int number = 0;
       ArrayList<Integer> list = new ArrayList<Integer>();
       //while((row >= start*2) && (column >= start*2)){
       while((row > start*2) && (column > start*2)){
           addMatrix(matrix, list, start, number);
           start++;
           number++;
       }
       return list;
    }
    public void addMatrix(int [][] matrix, ArrayList<Integer> list, int start, int number){
        int end_colum = matrix[0].length - 1 - number;//列
        int end_row = matrix.length - 1 - number;//行
        for(int i = start; i <= end_colum; i++){
        	list.add(matrix[start][i]);
        }
        if(start < end_row){//注意边界，没有注意到边界经常会多输出
            for(int i = start+1; i <= end_row; i++){
            	list.add(matrix[i][end_colum]);
        	}
        }
        if(end_colum > start && end_row > start){//注意边界，没有注意到边界经常会多输出
            for(int i = end_colum-1; i >= start; i--){
            	list.add(matrix[end_row][i]);
        	}
        }
        if(end_row-1 > start && end_colum > start){//注意边界，没有注意到边界经常会多输出
            for(int i = end_row-1; i > start; i--){
            	list.add(matrix[i][start]);
        	}
        }
        
    }
    
    
}
