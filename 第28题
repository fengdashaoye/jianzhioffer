题目描述
输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。 
输入描述:
输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。
深度遍历:
深度优先遍历,简单说就是先沿着一条路线最靠左或最靠右的路线往下走,并把路过的顶点标记为已访问.一直走到无路可走,或者下一站的顶点都被已经
访问过了,就顺着刚才走过的路往回看(回溯),当发现回溯中的某一顶点还有其他未被访问过的分支的时候,就选择这个分支继续,重复上面的过程继续遍
历.直到回溯到了遍历的出发点,就结束遍历.但如果检查发现图中还存在未被访问过的顶点,就说明图中还存在孤立与本图的分图.此时则任意选择一个
未被访问过的顶点继续访问.  最后当图中所有的顶点都被访问过的时候,就说明遍历完成.　
/**
 2      * 寻找没有被访问过的顶点.
 3      * @return > 0 即为还未被访问过的顶点.   -1 说明所有的节点都被访问过了.
 4      */
 5     private int findNotVisited(){
 6         for(int i = 0; i < noteNum; i ++){
 7             if(visitedCount[i] == 0){
 8                 return i;
 9             }
10         }
11         return -1;
12     }

/**
 2      * 深度遍历的递归
 3      * @param begin  从第几个节点开始遍历
 4      */
 5     public void DFS(int begin, Queue<T> edges){
 6         visitedCount[begin] = 1;                         //标记begin为已访问
 7         edges.offer(verticeInfo[begin]);                 //加入记录队列
 8         for(int a = 0; a < verticeNum; a++){             //遍历相邻的点
 9             if((racs[begin][a] != Integer.MAX_VALUE)&& visitedCount[a] == 0){   //相邻的点未被访问过
10                 DFS(a,edges);
11             }
12         }
13     }
14 
15     /**
16      * 开始深度优先遍历
17      * @return  返回保持有遍历之后的顺序的队列
18      */
19     public Queue<T> depthFirstSearch(){
20         initVisitedCount();         //将记录访问次序的数组初始化为0
21         Queue<T> edges = new LinkedList<>();    //用于存储遍历过的点,用于输出
22         int begin = -1;
23         while((begin = findNotVisited()) != -1){        //不等于-1说明还有未访问过的点
24             DFS(begin,edges);
25         }
26         return edges;
27     }

思路:本题需要用到深度遍历，找遍所有的序列
http://blog.csdn.net/yang20141109/article/details/51333417

import java.util.ArrayList;
import java.util.Arrays;
import java.util.*;
public class Solution {
    public ArrayList<String> Permutation(String str) {
        ArrayList<String> list = new ArrayList<String>();
        if(str == null)
            return list;
        char[] str_2 = str.toCharArray();
        Arrays.sort(str_2);
        do{
            list.add(str_2.toString());
        }while(next_permutation(str_2));
        return list;
       
    }
    public boolean next_permutation(char[] str){
        int length = str.length;
        boolean result = false;
        if(length < 2)
            return result;
        int second_part, third_part;
        for(second_part = length-2; second_part >= 0; second_part--){
            if(str[second_part] > str[second_part+1]){
                result = true;
                break;
            }
        }
        for(third_part = length-1; third_part > second_part; third_part--){
            if(str[third_part] > str[second_part]){
                break;
            }
        }
        char middle = str[third_part];
        str[third_part] = str[second_part];
        str[second_part] = middle;
        int i = second_part+1;
        int j = length-1;
        while(i < j){
            middle = str[i];
        	str[i] = str[j];
        	str[j] = middle;
            i++;
            j--;
        }
        return result;
    }
}

能够的代码:
链接：https://www.nowcoder.com/questionTerminal/fe6b651b66ae47d7acce78ffdd9a96c7
来源：牛客网

/* 
  *字典排序算法 
  *一个全排列可看做一个字符串，字符串可有前缀、后缀。 

  *生成给定全排列的下一个排列.所谓一个的下一个就是这一个与下一个之间没有其他的。这就要求这一个与下一个有尽可能长的共同前缀，也即变化限制在尽可能短的后缀上。 

  *[例]839647521是1--9的排列。1—9的排列最前面的是123456789，最后面的987654321，从右向左扫描若都是增的，就到了987654321，也就没有下一个了。否则找出第一次出现下降的位置。 
  * 【例】 一般而言，设P是[1,n]的一个全排列。 
  *　　　　　　P=P1P2…Pn=P1P2…Pj-1PjPj+1…Pk-1PkPk+1…Pn 
  *　　　　find:　　j=max{i|Pi<Pi+1} 
  *　　　　　　　　　k=max{i|Pi>Pj} 
  *　　　　　　1，  对换Pj，Pk， 
  *　　　　　　2，  将Pj+1…Pk-1PjPk+1…Pn翻转 
  *          P’= P1P2…Pj-1PkPn…Pk+1PjPk-1…Pj+1即P的下一个   
  *【例】 如何得到346987521的下一个 
  *    1，从尾部往前找第一个P(i-1) < P(i)的位置 
  *            3 4 6 <- 9 <- 8 <- 7 <- 5 <- 2 <-
  1 
  *        最终找到6是第一个变小的数字，记录下6的位置i-1 
  *    2，从i位置往后找到最后一个大于6的数 
  *            3 4 6 -> 9 -> 8 -> 7 5 2 1 
  *        最终找到7的位置，记录位置为m 
  *    3，交换位置i-1和m的值 
  *            3 4 7 9 8 6 5 2 1 
  *    4，倒序i位置后的所有数据 
  *            3 4 7 1 2 5 6 8 9 
  *    则347125689为346987521的下一个排列 
  */
import java.util.ArrayList; 
import java.util.Arrays; 
  public class Solution {
      public ArrayList<String> Permutation(String str) { 
          ArrayList<String> list = new ArrayList<String>();
          if(str == null || str.length()==0) { 
              return list; 
          } 
          char[] chars = str.toCharArray(); 
          Arrays.sort(chars); 
          list.add(String.valueOf(chars)); 
          int len = chars.length; 
          while(true) { 
              int lIndex = len-1; 
              //从右往左，找到每一个开始变小数字的位置 
              while(lIndex>0 && chars[lIndex-1]>=chars[lIndex]){ 
                  lIndex--; 
              } 
              //从右向左扫描若都是增的，代表全排列结束 
              if(lIndex == 0) { 
                  break; 
              } 
              int rIndex = lIndex; 
              //从开始变小数字后面开始向右遍历，找到最后一个比这个数字大的数 
              while(rIndex<len && chars[rIndex]>chars[lIndex-1]) { 
                  rIndex++; 
              } 
              //交换lIndex-1和rIndex-1这两个数的位置 
              swap(chars,lIndex-1,rIndex-1); 
              //lIndex开始逆序 
              reverse(chars,lIndex);
              list.add(String.valueOf(chars)); 
          } 
          return list; 
      }
      private void swap(char[] chars, int i, int j) { 
          char temp = chars[i]; 
          chars[i] = chars[j]; 
          chars[j] = temp; 
      }
      private void reverse(char[] chars,int k) { 
          if(chars==null || chars.length<=k) {//最开始升序时，因为这，不用reverse
              return; 
          } 
          int len = chars.length; 
          for(int i=0; i<(len-k)/2; i++) { 
              int m = k+i; 
              int n = len-1-i; 
              swap(chars,m,n); 
          }
      }
  }
