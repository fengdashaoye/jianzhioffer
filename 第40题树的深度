题目描述
输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。
思路:先序遍历
老实说，写的时候瞎蒙的，后退一步的想法是之前有过类似一道题,但是那道题是深度遍历，返回一步的操作是对数组操作，即引用操作，但我这里是对值操作
可能是因为值是全局的？？
代码:
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    int length = -1;
    int length_2 = 0;
    public int TreeDepth(TreeNode root) {
        int result = 0;
        if(root == null)
            return 0;
        result = tree(root);
        return result;
        
    }
    public int tree(TreeNode root){
        if(root == null)
            return length;
        length_2++;
        TreeDepth(root.left);
        TreeDepth(root.right);
        if(length_2 > length){
            length = length_2;
        }
        length_2--;//后退一步
        return length;
    }
}

另一种写法,较为简单
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    
    public int TreeDepth(TreeNode root) {
        if(root == null)
            return 0;
        int left = TreeDepth(root.left);
        int right = TreeDepth(root.right);
        return Math.max(left, right)+1;
        
    }
    
}


