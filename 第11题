题目:输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
思路:一开始看到有补码，查了一下资料，正数，补码与原码相同，也就是2进制
对于负数，符号位为1，原码从右向左，遇到第一个1以后，后续的翻转，0->1,1->0.
于是我就这样想，正数没什么好说的，负数我设定一个panduan，然后将该负数变成正数，求其2进制，然后按照上诉步骤从右往左，最后加上符号位。
代码: 对于-1来说，变成1以后number_2为"1"所以最后输出为1，不是32.这种想法很不好，不够专业，应该用位运算。
public class Solution {
    public int NumberOf1(int n) {
		int panduan = 0;
        if(n < 0){
            n = -n;
            panduan = 1;
        }
        int result = 0;
        if(panduan == 0){
            String number = Integer.toBinaryString(n);
            for(int i = 0; i < number.length(); i++){
                if(number.charAt(i) == '1'){
                    result++;
                }
            }
        }else{
            int panduan_2 = 0;
            String number_2 = Integer.toBinaryString(n);
            for(int i = number_2.length()-1; i > 0 ; i++){
                if(panduan_2 == 0){
                    if(number_2.charAt(i) == '1'){
                        result++;
                        panduan_2 = 1;
                    }
                }else{
                    if(number_2.charAt(i) == '0'){
                        result++;
                    }
                }
            }
            result++;
        }
        return result;
    }
}
