题目:输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
思路:一开始看到有补码，查了一下资料，正数，补码与原码相同，也就是2进制
对于负数，符号位为1，原码从右向左，遇到第一个1以后，后续的翻转，0->1,1->0.
于是我就这样想，正数没什么好说的，负数我设定一个panduan，然后将该负数变成正数，求其2进制，然后按照上诉步骤从右往左，最后加上符号位。
代码: 对于-1来说，变成1以后number_2为"1"所以最后输出为1，不是32.这种想法很不好，不够专业，应该用位运算。
public class Solution {
    public int NumberOf1(int n) {
		int panduan = 0;
        if(n < 0){
            n = -n;
            panduan = 1;
        }
        int result = 0;
        if(panduan == 0){
            String number = Integer.toBinaryString(n);
            for(int i = 0; i < number.length(); i++){
                if(number.charAt(i) == '1'){
                    result++;
                }
            }
        }else{
            int panduan_2 = 0;
            String number_2 = Integer.toBinaryString(n);
            for(int i = number_2.length()-1; i > 0 ; i++){
                if(panduan_2 == 0){
                    if(number_2.charAt(i) == '1'){
                        result++;
                        panduan_2 = 1;
                    }
                }else{
                    if(number_2.charAt(i) == '0'){
                        result++;
                    }
                }
            }
            result++;
        }
        return result;
    }
}
位运算代码:
最开始的代码:会出现死循环，
一开始的原理，不断与1与，若为1则1&1=1 若为0则0&1=0 不断右移计算
但是如果输入负数，0x80000000,右移后为0xC0000000，而不是0x40000000，因为是负数，最高位为1，最终为0xffffffff，所以死循环
public class Solution {
    public int NumberOf1(int n) {
		int count = 0;
        while(n != 0){
            if((n & 1) != 0)
                count++;
            n = n >> 1;
        }
        return count;
    }
}
一般的代码:为了避免负数的死循环，我们左移
首先把n与1(flag)相与，此时判断的是最低位是否为1，接着左移flag，1变成了2，然后flag与n相与，判断第2位是否为1，因为
在java中int 32位，移到最后为0.
public class Solution {
    public int NumberOf1(int n) {
		int result = 0;
        int flag = 1;
        while(flag != 0){
            if((n & flag) != 0) //注意这里(n & flag) == 1报错
                result++;
            flag = flag << 1;
	}
        return result;
    }
}

比较好的方法:
一个整数减1的情况，如果最低位为1，减完后最低位变成0
如果最低位为0，如果最右边的1位于m位，减去1后，该m位变成0，m位之后(之右)0变成1
以1100举例，ll00减1后变成1011,1100&1011 = 1000 把1100最右边的1变成0
public class Solution {
    public int NumberOf1(int n) {
		int result = 0;
        
        while(n != 0){
            ++result;
            n = n & (n-1);
	}
        return result;
    }
}
