题目描述
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满
足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续
正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck! 
输出描述:
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序

思路
//左神的思路，双指针问题
//当总和小于sum，大指针继续+
//否则小指针+
代码:此代码没通过，时间复杂度太高了
import java.util.ArrayList;
public class Solution {
    public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) {
        ArrayList<ArrayList<Integer> > list = new ArrayList<ArrayList<Integer> >();
        if(sum < 3)
            return list;
        int begin = 1;
        int end = 2;
        while(end > begin){
            int result = summary(begin, end);
            if(result < sum){
                end++;
            }else if(result > sum){
                begin++;
            }else{
                ArrayList<Integer> content = new ArrayList<Integer>();
                int i = begin;
                int j = end;
                for(; i <= j; i++){
                    content.add(i);
                }
                list.add(content);
            }
            
        }
        return list;
        
       
    }
    public int summary(int begin, int end){
        int result = 0;
        result = (begin + end) * (end - begin + 1)/2;
        return result;
    }
}


实际上是二元一次方程组:
(a + b)(b - a + 1) = sum * 2
设x = a + b, y = b - a + 1, y >= 2
枚举y，得x，解出a,b

但是，这样就挺快:
import java.util.ArrayList;
public class Solution {
    public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) {
        ArrayList<ArrayList<Integer> > list = new ArrayList<ArrayList<Integer> >();
        if(sum < 3)
            return list;
        int begin = 1;
        int end = 2;
        int mid = (sum+1)>>1;
        int cur = 3;
        while(begin < mid){
            while(cur < sum){
                end++;
                cur += end;
            }
            if(cur == sum){
                ArrayList<Integer> content = new ArrayList<Integer>();
                for(int i = begin; i <= end; i++){
                    content.add(i);
                }
                list.add(content);
            }
            cur -= begin;
            begin++;
            
        }
        return list;
        
       
    }
}


