题目描述
统计一个数字在排序数组中出现的次数。
思路：因为是排序的，用2分查找找到一个与给定值相同值的数组的位置，然后向前向后遍历
这种做法还是不太好，因为可能全部都是22222222222，那么效率很低，
应该用二分查找找到开始的坐标和结束的坐标，然后相减。
代码：
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
        if(array == null || array.length == 0)
            return 0;
        int panduan = 0;
        int count = 1;
        int position = binary(array, k);
        if(position == -1)
            return 0;
        int left = position-1;
        int right = position+1;
        while(left >= 0){
            if(array[left] != k){
                break;
            }else{
                count++;
                left--;
            }
        }
        while(right <= array.length-1){
            if(array[right] != k){
                break;
            }else{
                count++;
                right++;
            }
        }
        return count;
       
    }
    public int binary(int[] array, int k){
        int low = 0;
        int high = array.length-1;
        int result = -1;
        while(low <= high){
            int mid = (low + high) >> 1;
            if(k < array[mid]){
                high = mid-1;
            }else if(k > array[mid]){ 
                low = mid+1;
            }else{
                result = mid;
                break;
            }
        }
        return result;
    }
}

修改后的代码:
public class Solution {
    public int get_first(int[] array, int k){
        int low = 0;
        int high = array.length-1;
        int mid = (low + high) >> 1;
        //while(low < high){
        while(low <= high){
            if(array[mid] < k){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
            mid = (low + high) >> 1;
        }
        return low;
    }
    
     public int get_last(int[] array, int k){
        int low = 0;
        int high = array.length-1;
        int mid = (low + high) >> 1;
        //while(low < high){
        while(low <= high){
            if(array[mid] <= k){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
            mid = (low + high) >> 1;
        }
        return high;
    }
    
    public int GetNumberOfK(int [] array , int k) {
        if(array == null || array.length == 0)
            return 0;
        int up = get_last(array, k);
        int down = get_first(array, k);
        return up-down+1;  
    }
   
    
    
}




