题目:输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）

首先顺序的次序在新的链表中保存好，用map依次保存两个链表各个节点的对应关系。我用了两个map，其实一个map就行。
还有另外一种思路：把两个链表和到一起
例如原先A->B->C->D->E
       |     ^
       |-----|
       我们可以
       A->A'->B->B'->C->C'->D->D'
       |             ^
       |-------------|
       则A'.random = A.random.next;
       然后拆分
       奇数，偶数得拆
entry.getKey().random = map2.get(entry.getValue().random);

代码:

/*
public class RandomListNode {
    int label;
    RandomListNode next = null;
    RandomListNode random = null;

    RandomListNode(int label) {
        this.label = label;
    }
}
*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.*;
import java.util.Map;

public class Solution {
    public RandomListNode Clone(RandomListNode pHead)
    {
        if(pHead == null)
            return null;
        RandomListNode right = pHead;
        RandomListNode cur = new RandomListNode(right.label);
        RandomListNode head = cur;
        cur.next = null;
        HashMap<RandomListNode, RandomListNode> map1 = new HashMap<RandomListNode, RandomListNode>();
        HashMap<RandomListNode, RandomListNode> map2 = new HashMap<RandomListNode, RandomListNode>();
        
        map1.put(cur, right);
        map2.put(right, cur);
        right = right.next;
        
        while(right != null){
            RandomListNode first = new RandomListNode(right.label);
            cur.next = first;
            cur = first;
            map1.put(cur, right);
            map2.put(right, cur);
            cur.next = null;
            right = right.next;
        }
        for(Entry<RandomListNode, RandomListNode> entry : map1.entrySet()){
            entry.getKey().random = map2.get(entry.getValue().random);
        }
        return head;
        
    }
}


