题目描述
给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。
思路:最傻的想法，二重循环，时间复杂度O(n^2)。
代码:
import java.util.ArrayList;
public class Solution {
    public int[] multiply(int[] A) {
        int[] B = new int[A.length];
        if(A == null || A.length == 0)
            return B;
        int length = A.length;
        for(int i = 0; i < length; i++){
            int number = 1;
            for(int j = 0; j < length; j++){
                if(i != j){
                    number *= A[j];
                }
            }
            B[i] = number;
        }
        
        return B;

    }
}

思路:非常棒的一种思想
B0   1   A1  A2 .  . . . . . . An-1
B1   A0  1   A2
.    .   A1  1
.    .   .   .
.    .   .   .
.    .   .   .
.    .   .   .
.    .   .   .
Bn-1 A0  A1  A2 .........An-2  1


代码:
import java.util.ArrayList;
public class Solution {
    public int[] multiply(int[] A) {
        int[] B = new int[A.length];
        if(A == null || A.length == 0)
            return B;
        B[0] = 1;
        //计算下三角
        for(int i = 1; i < A.length; i++){
            B[i] = B[i-1] * A[i-1];
        }
        int mid = 1;
        //计算上三角
        for(int i = A.length - 2; i >= 0; i--){
            mid *= A[i+1];
            B[i] *= mid;
        }
        return B;
        

    }
}

