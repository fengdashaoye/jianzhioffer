题目:输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输
入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
敲黑板：重点（试试后序+中序）
思路:找出根节点，然后再分别找左右字数的根节点，所以用递归
代码:
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
      public TreeNode makeTree(int[] pre, int startpre, int endpre, int[] in, int startin, int endin){
        if(startpre > endpre || startin > endin){
            return null;
        }
        TreeNode root = new TreeNode(pre[startpre]);//构造函数
        for(int i = startin; i <= endin; i++)//找到子树的根节点
            if(in[i] == pre[startpre]){
                //对于前序，startpre+1到startpre+i-startin属于左子树
                //对于中序，startin到i-1属于左子树部分
                root.left = makeTree(pre, startpre+1, startpre+i-startin, in, startin, i-1);
                //对于前序，i-startin+startpre+1到endpre属于右子树
                //对于中序，i+1到endin属于右子树部分
                root.right = makeTree(pre, i-startin+startpre+1, endpre, in, i+1, endin);
            }
            return root;
          
    }
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        TreeNode root = makeTree(pre, 0, pre.length-1, in, 0, in.length-1);
        return root;
    }
  
}
需要注意的是:这样写出错
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
      public TreeNode makeTree(int[] pre, int startpre, int endpre, int[] in, int startin, int endin){
        if(startpre > endpre || startin > endin){
            return null;
        }
        TreeNode root = new TreeNode(pre[startpre]);//构造函数
        for(int i = startin; i <= endin; i++){//找到子树的根节点        for循环后面加上括号后出错，告诉我没有返回，所以需要注意一下
            if(in[i] == pre[startpre]){
                //对于前序，startpre+1到startpre+i-startin属于左子树
                //对于中序，startin到i-1属于左子树部分
                root.left = makeTree(pre, startpre+1, startpre+i-startin, in, startin, i-1);
                //对于前序，i-startin+startpre+1到endpre属于右子树
                //对于中序，i+1到endin属于右子树部分
                root.right = makeTree(pre, i-startin+startpre+1, endpre, in, i+1, endin);
            }
            return root;
        } 
    }
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        TreeNode root = makeTree(pre, 0, pre.length-1, in, 0, in.length-1);
        return root;
    }
  
}
