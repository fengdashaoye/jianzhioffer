题目描述
在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的
结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5
思路:首先确定重复的值有哪些,hashmap的使用目的是key值重复的情况下会覆盖，重复节点的值作为Key值
然后再存入链表中，然后不断判断删除流表。


代码:
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.ArrayList;
/*
 public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}
*/
public class Solution {
    ArrayList<Integer> first = new ArrayList<Integer>();
    ArrayList<Integer> second = new ArrayList<Integer>();
    HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();
    public ListNode deleteDuplication(ListNode pHead)
    {
        if(pHead == null)
            return null;
        ListNode head = pHead;
        while(head != null){
            if(!containsvalue(first, head.val)){
                first.add(head.val);
            }else{
                hash.put(head.val, 1);//key值为重复的值
            }
            head = head.next;
        }
        put(second, hash);
        head = pHead;
        ListNode last = null;
        while(head != null){
            if(containsvalue(second, head.val)){
                if(head == pHead){
                    while(head != null && containsvalue(second, head.val)){
                        head = head.next;
                        pHead = head;
                    }
                }else{
                    
                    while(head != null && containsvalue(second, head.val)){
                        head = head.next;
                    }
                    last.next = head;
                }
            }else{
                last = head;
                head = head.next;
            }
        }
        return pHead;
        

    }
    public boolean containsvalue(ArrayList<Integer> first, int number){
        boolean result = false;
        for(int i = 0; i < first.size(); i++){
            if(number == first.get(i)){
                result = true;
                break;
            }
        }
        return result;
    }
    public void put(ArrayList<Integer> second, HashMap<Integer, Integer> hash){
        for(Entry<Integer, Integer> entry : hash.entrySet()){
            second.add(entry.getKey());
        }
    }
}






