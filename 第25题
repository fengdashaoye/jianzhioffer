题目:输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
思路：因为是从根节点到叶子节点的路径。所以要先遍历根节点。所以需要先序遍历。
如果访问到叶子节点发现路径值不等于固定值，回到父节点，看父节点的另一个子节点。
递归调用的过程就是压榨、出栈的过程。


代码:嗯，此代码看不懂
import java.util.ArrayList;
import java.util.*;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    ArrayList<ArrayList<Integer>> all = new ArrayList<ArrayList<Integer>>();
    ArrayList<Integer> list = new ArrayList<Integer>();
    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        if(root == null)
            return all;
        list.add(root.val);
        target = target - root.val;
        if(target == 0 && root.left == null && root.right == null){
            all.add(new ArrayList<Integer>(list));
        }
        FindPath(root.left, target);//这两行加上之间的root.val就是先序遍历的递归代码
        FindPath(root.right, target);
        list.remove(list.size()-1);
        return all;
   
    }
}

首先我对递归的思想一致不是很了解。一直都在写递归就是入栈、出栈的过程，但还是不了解。
所以今天我以先序遍历为例子，仔细解析一些递归的思想。
先序遍历:
void PreOrder(BiTree root)
{
    if(root)
    {
        visit(root);
        PreOrder(root->left);
        PreOrder(root->right);
    }
}
如果树!=null
访问根节点，没有问题。
紧接着调用根节点的左子节点为参数的本身函数，即进入根节点的左子树，

但是(敲黑板、重点啊)对递归的保存做过一个跟踪：保存的当前进入递归后的下一条指令的地址。
所以此时进入左子树后，要保存进入右子树指令的地址：PreOrder(root->right)这条指令的地址被保存。
相当于入栈，进入根节点右子树指令入栈。

左子树不空，则访问左子树的根结点，继续进入左子树的左子树，同时保存左子树的右子树的访问入口。进入节点右子树的指令依次入栈。
如此进行下去，直到最左子树的左子节点为null了，发现root->left == null, 此时 进行指令PreOrder(root->right),
如果不为叶子节点，则进入该节点的右子树。
如果该节点为叶子节点，则其右子节点为null,此时取出栈顶的指令。
进入叶子节点的父节点的右子树。
此时访问该右子树根节点，然后是右子树的左子树，访问右子树的右子树的指令又依次入栈。

不断如此，访问完叶子节点，访问父节点的右子树。如此不断入栈出栈，递归访问实现先序遍历。


本题思路:
利用了栈，栈中存储路径上的节点的值，先序遍历，进入某个节点的左子树时，下一条指令压入栈，即进入该节点的右子树压入栈。
当遇到叶子节点是进入if(left == null && right == null)存储路径，然后取栈顶，指令栈顶存储进入该叶子节点的右子树，因为if(root == null)所以pop掉
存储路径的栈的栈顶。此时继续取出指令的栈的栈顶。进入叶子节点的父节点的右子树

本题代码:
import java.util.ArrayList;
import java.util.*;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    
    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        ArrayList<ArrayList<Integer>> all = new ArrayList<ArrayList<Integer>>();
        Stack<Integer> stack = new Stack<Integer>();
        if(root == null)
            return all;
        Findpath_digui(root, stack, target, all);
        return all;
    }
    public void Findpath_digui(TreeNode root, Stack<Integer> stack, int target, ArrayList<ArrayList<Integer>> all){
        if(root == null)
            return;
        if(root.left == null && root.right == null){
            if(root.val == target){
                ArrayList<Integer> list = new ArrayList<Integer>();
                for(int i : stack){
                    list.add(new Integer(i));
                }
                list.add(new Integer(root.val));//因为此时stack里存的是之前的节点值，叶子节点的值还没存，
                                                //因为叶子节点的left, right == null
                all.add(list);
                return;//原先的思路没加，但是此处作为一个终结点，还是该加
            }   
        }else{
            stack.push(new Integer(root.val));//因为终点是叶子节点，而不是某个左子节点或者右子节点为空的节点，stack里存着路径
            Findpath_digui(root.left, stack, target-root.val, all);//先序遍历
            Findpath_digui(root.right, stack, target-root.val, all);
            stack.pop();//到了这一步，说明已经找到一条路径了，去掉该叶子节点。
        }
        
    }
}























