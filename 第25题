题目:输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
思路：因为是从根节点到叶子节点的路径。所以要先遍历根节点。所以需要先序遍历。
如果访问到叶子节点发现路径值不等于固定值，回到父节点，看父节点的另一个子节点。
递归调用的过程就是压榨、入栈的过程。


代码:嗯，此代码看不懂
import java.util.ArrayList;
import java.util.*;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    ArrayList<ArrayList<Integer>> all = new ArrayList<ArrayList<Integer>>();
    ArrayList<Integer> list = new ArrayList<Integer>();
    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        if(root == null)
            return all;
        list.add(root.val);
        target = target - root.val;
        if(target == 0 && root.left == null && root.right == null){
            all.add(new ArrayList<Integer>(list));
        }
        FindPath(root.left, target);//这两行加上之间的root.val就是先序遍历的递归代码
        FindPath(root.right, target);
        list.remove(list.size()-1);
        return all;
   
    }
}



