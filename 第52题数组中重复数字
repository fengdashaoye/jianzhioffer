题目描述
在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个
数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。

思路:很笨的想法，时间复杂度大概是O(n)，利用HashMap
代码：
import java.util.HashMap;
public class Solution {
    // Parameters:
    //    numbers:     an array of integers
    //    length:      the length of array numbers
    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;
    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++
    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    public boolean duplicate(int numbers[],int length,int [] duplication) {
        if(numbers == null || numbers.length == 0)
            return false;
        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();
        boolean result = false;
        for(int i = 0; i < numbers.length; i++){
            if(hash.containsKey(numbers[i])){
                duplication[0] = numbers[i];
                result = true;
                break;
            }else{
                hash.put(numbers[i], 1);
            }
        }
        return result;
        
    
    }
}

思路:他这种想法也很好
代码:
import java.util.HashMap;
public class Solution {
    // Parameters:
    //    numbers:     an array of integers
    //    length:      the length of array numbers
    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;
    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++
    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    public boolean duplicate(int numbers[],int length,int [] duplication) {
        if(numbers == null || numbers.length == 0)
            return false;
        boolean[] content = new boolean[length];
        for(int i = 0; i < numbers.length; i++){
            if(content[numbers[i]] == true){
                duplication[0] = numbers[i];
                return true;
            }
            content[numbers[i]] = true;
        }
        return false;
        
    
    }
}

