题目描述
输入一棵二叉树，判断该二叉树是否是平衡二叉树。
源代码好像没有判断是否是二叉搜索树
代码:
public class Solution {
    /*平衡二叉树需要满足两个条件：
    ①是一个二叉搜索树（中序遍历得到的结果是由小到大）
    ②左右子树高度差不大于1；*/
    public boolean result = true;
    public boolean IsBalanced_Solution(TreeNode root) {
        if(root == null)
            return true;
        panduan(root);
        return result;
        
    }
    public int panduan(TreeNode root){
        if(root == null)
            return 0;
        int left = panduan(root.left);
        int right = panduan(root.right);
        if(Math.abs(left-right) > 1){
            result = false;
        }
        
        return right > left ? right+1 : left + 1;
    }
}


加上判断是否是二叉搜索树
代码:
import java.util.Stack;
public class Solution {
    /*平衡二叉树需要满足两个条件：
    ①是一个二叉搜索树（中序遍历得到的结果是由小到大）
    ②左右子树高度差不大于1；*/
    public boolean result = true;
    private Stack<Integer> stack;
    public boolean IsBalanced_Solution(TreeNode root) {
        boolean result2 = true;
        if(root == null)
            return true;
        TreeNode head = root;
        panduan(root);
        
        result2 = panduan2(head);
        return result;
        
    }
    public int panduan(TreeNode root){
        if(root == null)
            return 0;
        int left = panduan(root.left);
        int right = panduan(root.right);
        if(Math.abs(left-right) > 1){
            result = false;
        }
        
        return right > left ? right+1 : left + 1;
    }
    public boolean panduan2(TreeNode head){
        if(head == null)
            return true;
        
        stack = new Stack<Integer>();
        inorder(head);
        int i = stack.peek();
        stack.pop();
        int j;
        while(!stack.isEmpty()){
            j = stack.peek();
            stack.pop();
            if(i <= j)
                return false;
            i = j;
        }
        return true;
        
    }
    public void inorder(TreeNode head){
        if(head != null){
            inorder(head.left);
            stack.push(head.val);
            inorder(head.right);
        }
    }
    
}
