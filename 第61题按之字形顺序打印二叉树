题目描述
从上往下打印出二叉树的每个节点，同层节点从左至右打印。

思路:先正常从上至下存储序列，此过程的同时存储每层的个数，然后根据序列，按照奇偶和每层的个数存储
代码:
import java.util.ArrayList;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    ArrayList<Integer> xulie = new ArrayList<Integer>();
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer> > result = new ArrayList<ArrayList<Integer> >();
        if(pRoot == null)
            return result;
        ArrayList<TreeNode> list = new ArrayList<TreeNode>();
        ArrayList<TreeNode> list2 = new ArrayList<TreeNode>();
        list.add(pRoot);
        list2.add(pRoot);
        int i = 1;
        int num = 0;
        xulie.add(1);
        while(list2.size() > 0){
            if(list2.get(0).left != null){
                list.add(list2.get(0).left);
                list2.add(list2.get(0).left);
                num++;
            }
            if(list2.get(0).right != null){
                list.add(list2.get(0).right);
                list2.add(list2.get(0).right);
                num++;
            }
            list2.remove(0);
            i--;
            if(i == 0){
                xulie.add(num);
                i = num;
                num = 0;
            }
        }
        
        int panduan = 0;
        int xu = 0;
        i = 0;
        while(i < list.size()){
            ArrayList<Integer> content = new ArrayList<Integer>();
            if(panduan % 2 == 0){
                for(int j = 0; j < xulie.get(xu); j++){
                	content.add(list.get(i+j).val);
            	}
            	result.add(content);
            	i += xulie.get(xu);
            	xu++;
                panduan++;
            }else{
                for(int j = xulie.get(xu)-1; j >= 0; j--){
                    content.add(list.get(i+j).val);
                }
                result.add(content);
                i += xulie.get(xu);
                xu++;
                panduan++;
            }
            
        }
        
        return result;
        
    }
}






