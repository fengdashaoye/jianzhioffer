题目描述
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于
数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
思路:
用hashmap, key是数组的值，value是次数
代码:
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.*;
import java.util.Map;
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        if(array.length == 0)
            return 0;
        int result = 0;
        HashMap<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
        for(int i = 0; i < array.length; i++){
            if(hashmap.containsKey(array[i])){
                int number = hashmap.get(Integer.valueOf(array[i])).intValue() + 1;
                hashmap.put(array[i], number);
            }else{
                hashmap.put(array[i], 1);
            }
        }
        for(Entry<Integer, Integer> entry : hashmap.entrySet()){
            if(entry.getValue().intValue() > array.length/2){
                result = entry.getKey().intValue();
                break;
            }
        }
        return result;
    }
}
第二种思路:
采用阵地攻守的思想： 第一个数字作为第一个士兵，守阵地；count = 1； 遇到相同元素，count++; 遇到不
相同元素，即为敌人，同归于尽,count--；当遇到count为0的情况，又以新的i值作为守阵地的士兵，继续下去，到最后还
留在阵地上的士兵，有可能是主元素。 再加一次循环，记录这个士兵的个数看是否大于数组一般即可。
代码:
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        if(array.length == 0 || array == null)
            return 0;
        int result = array[0];
        int number = 1;
        for(int i = 1; i < array.length; i++){
            if(result == array[i]){
                number++;
            }else{
                number--;
            }
            if(number <= 0){
                result = array[i];
            }
        } 
        number = 0;
        for(int i = 0; i < array.length; i++){
            if(result == array[i]){
                number++;
            }
        }
        if(!(number > array.length/2)){
            result = 0;
    	}
        return result;
    }
}
