题目描述
HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的
一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向
量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子
向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他忽悠住？(子向量的长度至少是1)
代码:
public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        if(array == null || array.length == 0)
            return 0;
        int result = 0;
        int start = 0;
        int i = 0;
        for(; i < array.length; i++){
            if(array[i] > 0){
                result = array[i];
                start = i;
                break;
            }
        }
        if(start == array.length)//注意判断全负数
            return min(array);
        int head = start;
        int result_head = result;
        start++;
        for(; start < array.length; start++){
            result = result+array[start];
            if(result >= 0){
                if(result > result_head){
                    result_head = result;
                }    
            }else{
                result = 0;
            }
        }
        
        
    }
    public int min(int[] array){
        int min_number = Integer.MAX_VALUE;
        for(int i = 0; i < array.length; i++){
            if(array[i] < min_number){
                min_number = array[i];
            }
        }
        return min_number;
    }
}
