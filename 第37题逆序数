题目描述
在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。
输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007 
输入描述:
题目保证输入的数组中没有的相同的数字
数据范围：
	对于%50的数据,size<=10^4
	对于%75的数据,size<=10^5
	对于%100的数据,size<=2*10^5

思路:不能一个数字，然后把它与后面所有的数比较，复杂度为n的平方。
此处用到了归并排序，复杂度为ologn。
归并排序的思想:http://blog.csdn.net/middlekingt/article/details/8446552

注意，在归并过程中，发现有逆序后，count值加上后，需要调整，即临时数组中的值变为顺序，避免下次再重复计算。

代码:
public class Solution {
    public int InversePairs(int [] array) {
        int result = 0;
        if(array == null || array.length == 0)
            return 0;
        int[] content = new int[array.length];
        for(int i = 0; i < array.length; i++){
            content[i] = array[i];
        }
        result = merge(array, content, 0, array.length-1);
        return result;   
    }
    
    public int merge(int[] array, int[] content, int low, int high){
        if(low == high)
            return 0;
        int mid = (low + high) >> 1;
        int leftcount = merge(array, content, low, mid)%1000000007;
        int rightcount = merge(array, content, mid+1, high)%1000000007;
        int count = 0;
        int i = mid;
        int j = high;
        int tem_copy = high;
        while(low <= i && mid+1 <= j){
            if(array[i] > array[j]){
                count += j-mid;//array[mid+1到j]都比array[i]小，所以有这么多对逆序
                content[tem_copy--] = array[i--];//因为有逆序数,调整，后面为大，避免下次再重复计算。
                if(count >= 1000000007){
                    count %= 1000000007;
                }
            }else{
                content[tem_copy--] = array[j--];
            }
        }
        //处理剩下的
        for(; i >= low; i--){
            content[tem_copy--] = array[i];
        }
        for(; j >= mid+1; j--){
            content[tem_copy--] = array[j];
        }
        for(int s = low; s <= high; s++){
            array[s] = content[s];
        }
        return (leftcount + rightcount + count)%1000000007;
    }
}
    
    
