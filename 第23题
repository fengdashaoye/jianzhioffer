题目:从上往下打印出二叉树的每个节点，同层节点从左至右打印。
思路:并不是二叉树都用递归，虽然大部分二叉树的题都用递归。
此题用两个list，一个存储树的节点，一个存储要返回的值。
首先在list2中存储根节点，然后在list中存储list2.get(0).val,然后如果list2.get(0).left或者.right不为null
则将该left或者right存入list2中，然后在list2删掉第一个值。
解释一下，
因为从左到右，所以不用递归。因为不断存储list2.get(0).left和.right，又不断删除list2的0值，删除后，list2的0值就是之前被删的那个节点的右边的一个
节点
所以不断add和remove(0),所以list2的0值是该树从上到下，每层从左到右的节点，又因为list存储的就是list2.get(0).val,所以是正确的
注意不能while(list2 != null)
而是while(list2.size() != 0)

代码:
import java.util.ArrayList;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    
    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<Integer>();
    	ArrayList<TreeNode> list2 = new ArrayList<TreeNode>();
        if(root != null){
            list2.add(root);    
        }
        //while(list2 != null){ //此时有错java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        while(list2.size() > 0){
            list.add(list2.get(0).val);
            if(list2.get(0).left != null){
                list2.add(list2.get(0).left);
            }
            if(list2.get(0).right != null){
                list2.add(list2.get(0).right);
            }
            list2.remove(0);
        }
        return list;
    
    }
}
