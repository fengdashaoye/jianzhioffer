题目描述
每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为
牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个
大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然
后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样
下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛
客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1

思路，嗯，我的方法不是很简单，有点复杂性，最好是能够推导出公式
代码:
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        if(n == 0 || m == 0)
            return -1;
        int[] content = new int[n];
        for(int i = 0; i < n; i++){
        	content[i] = i;
        }
        int number = m % n;
        int begin = 0;
        while(n > 1){
            begin = write(content, number, begin);
            n--;
            number = m % n;
        }
        int result = 0;
        result = fanhui(content);
        return result;
        
    }
    public int write(int[] content, int number, int begin){
    	if(number == 0){
    		int result = begin;
    		if(begin != 0){
    			begin--;
    		}else{
    			begin = content.length-1;
    		}
    		while(content[begin] == -1){
    			if(begin == 0){
    				begin = content.length-1;
    			}else{
    				begin--;
    			}
    		}
    		content[begin] = -1;
    		return result;
    	}
    	int result = begin;
    	int mid = begin;
        while(number > 0){
        	if(content[begin] != -1){
        		mid = begin;
        		if(begin == content.length -1){
        			begin = 0;
        			while(content[begin] == -1){
        				begin++;
        			}
        		}else{
        			begin++;
        			while(content[begin] == -1){
        				if(begin == content.length -1){
        					begin = 0;
        				}else{
        					begin++;
        				}
        			}
        			
        		}
        		number--;
        	}
        }
        content[mid] = -1;
        result = begin;
        return result;
    }
    public int fanhui(int[] content){
        int i = 0;
        int result = 0;
        for(; i < content.length; i++){
            if(content[i] != -1){
                result = content[i];
            }
        }
        return result;
    }
}

用公式会感觉非常高大上，这是别人的代码:
递推公式
f[1]=0;
f[i]=(f[i-1]+m)%i;  (i>1)
代码:
class Solution {
public:
    int LastRemaining_Solution(unsigned int n, unsigned int m)
    {
        if(n==0)
            return -1;
        if(n==1)
            return 0;
        else
            return (LastRemaining_Solution(n-1,m)+m)%n;
    }
};
